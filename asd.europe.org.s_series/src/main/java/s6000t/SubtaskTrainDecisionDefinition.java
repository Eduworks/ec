/**
 *
 * Generated by JaxbToStjsAssimilater.
 * Assimilation Date: Thu Sep 12 10:06:02 CDT 2019
 *
 **/

package s6000t;

import org.cassproject.schema.general.EcRemoteLinkedData;
import org.stjs.javascript.Array;
import s3000l.CrudCodeValues;
import s3000l.SubtaskRef;

public class SubtaskTrainDecisionDefinition extends EcRemoteLinkedData {

    protected SubtaskTrainIdentifier subtTrainId;
    protected SubtaskHumanInteractionRequirement coordCat;
    protected SubtaskDifficultyCategory subtDiff;
    protected SubtaskImportanceCategory subtImp;
    protected SubtaskFrequencyCategory subtFreq;
    protected SubtaskTrainingLevel subtTrainLvl;
    protected Array<SubtaskTrainingLevelRationale> subtTrainLvlRtnle;
    protected SubtaskTrainingDifficulty trainDiff;
    protected SubtaskTrainingLevelDecision trainLvl;
    protected Array<SubtaskTrainingLevelDecisionRationale> trainLvlRtnle;
    protected Array<SubtaskPerformanceObjective> perfObj;
    protected Array<Object> subtaskTrainStepNonAbstractClasses;
    protected SubtaskRef subtRef;
    protected s3000l.DownTime.OrgInfos orgInfos;
    protected s3000l.ConditionInstance.Docs docs;
    protected s3000l.ConditionInstance.Rmks rmks;
    protected KnowledgeSkillAttitudeRequirementItem ksaReqs;
    protected String uid;
    protected String uri;
    protected CrudCodeValues crud;

    public SubtaskTrainIdentifier getSubtTrainId() {
        return subtTrainId;
    }

    public void setSubtTrainId(SubtaskTrainIdentifier value) {
        this.subtTrainId = value;
    }

    public SubtaskHumanInteractionRequirement getCoordCat() {
        return coordCat;
    }

    public void setCoordCat(SubtaskHumanInteractionRequirement value) {
        this.coordCat = value;
    }

    public SubtaskDifficultyCategory getSubtDiff() {
        return subtDiff;
    }

    public void setSubtDiff(SubtaskDifficultyCategory value) {
        this.subtDiff = value;
    }

    public SubtaskImportanceCategory getSubtImp() {
        return subtImp;
    }

    public void setSubtImp(SubtaskImportanceCategory value) {
        this.subtImp = value;
    }

    public SubtaskFrequencyCategory getSubtFreq() {
        return subtFreq;
    }

    public void setSubtFreq(SubtaskFrequencyCategory value) {
        this.subtFreq = value;
    }

    public SubtaskTrainingLevel getSubtTrainLvl() {
        return subtTrainLvl;
    }

    public void setSubtTrainLvl(SubtaskTrainingLevel value) {
        this.subtTrainLvl = value;
    }

    public Array<SubtaskTrainingLevelRationale> getSubtTrainLvlRtnle() {
        if (subtTrainLvlRtnle == null) {
            subtTrainLvlRtnle = new Array<SubtaskTrainingLevelRationale>();
        }
        return this.subtTrainLvlRtnle;
    }

    public SubtaskTrainingDifficulty getTrainDiff() {
        return trainDiff;
    }

    public void setTrainDiff(SubtaskTrainingDifficulty value) {
        this.trainDiff = value;
    }

    public SubtaskTrainingLevelDecision getTrainLvl() {
        return trainLvl;
    }

    public void setTrainLvl(SubtaskTrainingLevelDecision value) {
        this.trainLvl = value;
    }

    public Array<SubtaskTrainingLevelDecisionRationale> getTrainLvlRtnle() {
        if (trainLvlRtnle == null) {
            trainLvlRtnle = new Array<SubtaskTrainingLevelDecisionRationale>();
        }
        return this.trainLvlRtnle;
    }

    public Array<SubtaskPerformanceObjective> getPerfObj() {
        if (perfObj == null) {
            perfObj = new Array<SubtaskPerformanceObjective>();
        }
        return this.perfObj;
    }

    public Array<Object> getSubtaskTrainStepNonAbstractClasses() {
        if (subtaskTrainStepNonAbstractClasses == null) {
            subtaskTrainStepNonAbstractClasses = new Array<Object>();
        }
        return this.subtaskTrainStepNonAbstractClasses;
    }

    public SubtaskRef getSubtRef() {
        return subtRef;
    }

    public void setSubtRef(SubtaskRef value) {
        this.subtRef = value;
    }

    public s3000l.DownTime.OrgInfos getOrgInfos() {
        return orgInfos;
    }

    public void setOrgInfos(s3000l.DownTime.OrgInfos value) {
        this.orgInfos = value;
    }

    public s3000l.ConditionInstance.Docs getDocs() {
        return docs;
    }

    public void setDocs(s3000l.ConditionInstance.Docs value) {
        this.docs = value;
    }

    public s3000l.ConditionInstance.Rmks getRmks() {
        return rmks;
    }

    public void setRmks(s3000l.ConditionInstance.Rmks value) {
        this.rmks = value;
    }

    public KnowledgeSkillAttitudeRequirementItem getKsaReqs() {
        return ksaReqs;
    }

    public void setKsaReqs(KnowledgeSkillAttitudeRequirementItem value) {
        this.ksaReqs = value;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String value) {
        this.uid = value;
    }

    public String getUri() {
        return uri;
    }

    public void setUri(String value) {
        this.uri = value;
    }

    public CrudCodeValues getCrud() {
        if (crud == null) {
            return CrudCodeValues.I;
        } else {
            return crud;
        }
    }

    public void setCrud(CrudCodeValues value) {
        this.crud = value;
    }

	public SubtaskTrainDecisionDefinition() {
		super("http://www.asd-europe.org/s-series/s3000l", "SubtaskTrainDecisionDefinition");
	}

}
