/**
 *
 * Generated by JaxbToStjsAssimilater.
 * Assimilation Date: Thu Sep 12 10:06:02 CDT 2019
 *
 **/

package s3000l;

import org.cassproject.schema.general.EcRemoteLinkedData;
import org.stjs.javascript.Array;
import s6000t.SubtaskTrainingLevelDecision;

public class RandomSubtaskCircuitBreakerSettings extends EcRemoteLinkedData {

    protected Array<RandomSubtaskCircuitBreakerSettings.Cb> cb;
    protected SubtaskCircuitBreakerSettingsTimeline precCb;
    protected SubtaskTrainingLevelDecision.Applic applic;
    protected String uid;
    protected CrudCodeValues crud;

    public Array<RandomSubtaskCircuitBreakerSettings.Cb> getCb() {
        if (cb == null) {
            cb = new Array<RandomSubtaskCircuitBreakerSettings.Cb>();
        }
        return this.cb;
    }

    public SubtaskCircuitBreakerSettingsTimeline getPrecCb() {
        return precCb;
    }

    public void setPrecCb(SubtaskCircuitBreakerSettingsTimeline value) {
        this.precCb = value;
    }

    public SubtaskTrainingLevelDecision.Applic getApplic() {
        return applic;
    }

    public void setApplic(SubtaskTrainingLevelDecision.Applic value) {
        this.applic = value;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String value) {
        this.uid = value;
    }

    public CrudCodeValues getCrud() {
        if (crud == null) {
            return CrudCodeValues.I;
        } else {
            return crud;
        }
    }

    public void setCrud(CrudCodeValues value) {
        this.crud = value;
    }

    public static class Cb {

        protected CircuitBreakerState cbState;
        protected CircuitBreakerReference cbRef;
        protected s3000l.ConditionInstance.Rmks rmks;

        public CircuitBreakerState getCbState() {
            return cbState;
        }

        public void setCbState(CircuitBreakerState value) {
            this.cbState = value;
        }

        public CircuitBreakerReference getCbRef() {
            return cbRef;
        }

        public void setCbRef(CircuitBreakerReference value) {
            this.cbRef = value;
        }

        public s3000l.ConditionInstance.Rmks getRmks() {
            return rmks;
        }

        public void setRmks(s3000l.ConditionInstance.Rmks value) {
            this.rmks = value;
        }

    }

	public RandomSubtaskCircuitBreakerSettings() {
		super("http://www.asd-europe.org/s-series/s3000l", "RandomSubtaskCircuitBreakerSettings");
	}

}
