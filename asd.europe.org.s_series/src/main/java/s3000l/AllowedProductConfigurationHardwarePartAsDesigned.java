/**
 *
 * Generated by JaxbToStjsAssimilater.
 * Assimilation Date: Thu Sep 12 10:06:00 CDT 2019
 *
 **/

package s3000l;

import org.cassproject.schema.general.EcRemoteLinkedData;
import org.stjs.javascript.Array;

public class AllowedProductConfigurationHardwarePartAsDesigned extends EcRemoteLinkedData {

    protected Array<PartIdentifier> partId;
    protected Array<PartName> name;
    protected HardwarePartHazardousClass haz;
    protected Array<HardwarePartOperationalAuthorizedLife> opAul;
    protected HardwarePartFitmentRequirement ftc;
    protected Boolean emi;
    protected Boolean ess;
    protected Boolean ems;
    protected Boolean mse;
    protected Boolean rse;
    protected HardwarePartLogisticsCategory logCat;
    protected HardwarePartRepairability rep;
    protected Array<HardwarePartScrapRate> sra;
    protected Array<HardwarePartRepairabilityStrategy> rpy;
    protected HardwarePartMaintenanceStart maintStart;
    protected Array<HardwarePartWasteProductsInUseDisposalDescription> inUseDispDescr;
    protected Array<HardwarePartWasteProductsPlannedDisposalDescription> plndDispDescr;
    protected Array<HardwarePartEnvironmentalAspectInUseClass> envmtInUseClass;
    protected Array<HardwarePartEnvironmentalAspectPlannedDisposalClass> envmtDispClass;
    protected Array<HardwarePartConsumptionRate> consRte;
    protected PartDemilitarizationClass dec;
    protected PartSpecialHandlingRequirement phstReq;
    protected Array<PartMaturityClass> maturity;
    protected Array<PartObsolescenceRiskAssessment> obsRisk;
    protected Array<PartAsDesignedPartsList> partsList;
    protected Array<AlternatePartAsDesignedRelationship> altPart;
    protected Array<ContainedSubstance> contSubs;
    protected s3000l.OperationalTask.Secs secs;
    protected LsaCandidateIndicator lsaCand;
    protected LsaCandidateRationale candRtnl;
    protected Array<LsaCandidateMaintenanceConcept> maintCpt;
    protected Array<LsaCandidateMaintenanceSolution> maintSln;
    protected Array<s3000l.ZoneElementRevision.SrvLife> productServiceLife;
    protected Array<s3000l.ZoneElementRevision.SmInt> scheduledMaintenanceInterval;
    protected Array<s3000l.ZoneElementRevision.Mfop> maintenanceFreeOperatingPeriod;
    protected Array<s3000l.ZoneElementRevision.Dt> downTime;
    protected Array<s3000l.ZoneElementRevision.Mmhoh> maintenanceManHoursPerOperatingHour;
    protected Array<s3000l.ZoneElementRevision.Mtbur> meanTimeBetweenUnscheduledRemoval;
    protected Array<s3000l.ZoneElementRevision.Mttr> meanTimeToRepair;
    protected Array<s3000l.ZoneElementRevision.Dmc> directMaintenanceCost;
    protected Array<s3000l.ZoneElementRevision.Spt> shopProcessingTime;
    protected Array<s3000l.ZoneElementRevision.Foh> failuresPerOperatingHour;
    protected Array<s3000l.ZoneElementRevision.Rplt> replacementTime;
    protected Array<s3000l.ZoneElementRevision.Lcc> lifeCycleCost;
    protected Array<s3000l.ZoneElementRevision.Mtbf> meanTimeBetweenFailure;
    protected Array<s3000l.ZoneElementRevision.FRate> failureRate;
    protected LsaCandidateAnalysisActivities anlysActvty;
    protected Array<TaskRequirementTarget> taskReq;
    protected Array<Object> taskTargetNonAbstractClasses;
    protected s3000l.DownTime.OrgInfos orgInfos;
    protected s3000l.ConditionInstance.Docs docs;
    protected s3000l.ConditionInstance.Rmks rmks;
    protected s3000l.ZoneElementRevision.DmgAnlys dmgAnlys;
    protected s3000l.ZoneElementRevision.FailModes failModes;
    protected s3000l.ZoneElementRevision.DetectMnCaps detectMnCaps;
    protected AuthorityToOperate authToOp;
    protected Array<NestedAllowedProductConfigurationRelationship> nestedPC;
    protected String uid;
    protected CrudCodeValues crud;

    public Array<PartIdentifier> getPartId() {
        if (partId == null) {
            partId = new Array<PartIdentifier>();
        }
        return this.partId;
    }

    public Array<PartName> getName() {
        if (name == null) {
            name = new Array<PartName>();
        }
        return this.name;
    }

    public HardwarePartHazardousClass getHaz() {
        return haz;
    }

    public void setHaz(HardwarePartHazardousClass value) {
        this.haz = value;
    }

    public Array<HardwarePartOperationalAuthorizedLife> getOpAul() {
        if (opAul == null) {
            opAul = new Array<HardwarePartOperationalAuthorizedLife>();
        }
        return this.opAul;
    }

    public HardwarePartFitmentRequirement getFtc() {
        return ftc;
    }

    public void setFtc(HardwarePartFitmentRequirement value) {
        this.ftc = value;
    }

    public Boolean getEmi() {
        return emi;
    }

    public void setEmi(Boolean value) {
        this.emi = value;
    }

    public Boolean getEss() {
        return ess;
    }

    public void setEss(Boolean value) {
        this.ess = value;
    }

    public Boolean getEms() {
        return ems;
    }

    public void setEms(Boolean value) {
        this.ems = value;
    }

    public Boolean getMse() {
        return mse;
    }

    public void setMse(Boolean value) {
        this.mse = value;
    }

    public Boolean getRse() {
        return rse;
    }

    public void setRse(Boolean value) {
        this.rse = value;
    }

    public HardwarePartLogisticsCategory getLogCat() {
        return logCat;
    }

    public void setLogCat(HardwarePartLogisticsCategory value) {
        this.logCat = value;
    }

    public HardwarePartRepairability getRep() {
        return rep;
    }

    public void setRep(HardwarePartRepairability value) {
        this.rep = value;
    }

    public Array<HardwarePartScrapRate> getSra() {
        if (sra == null) {
            sra = new Array<HardwarePartScrapRate>();
        }
        return this.sra;
    }

    public Array<HardwarePartRepairabilityStrategy> getRpy() {
        if (rpy == null) {
            rpy = new Array<HardwarePartRepairabilityStrategy>();
        }
        return this.rpy;
    }

    public HardwarePartMaintenanceStart getMaintStart() {
        return maintStart;
    }

    public void setMaintStart(HardwarePartMaintenanceStart value) {
        this.maintStart = value;
    }

    public Array<HardwarePartWasteProductsInUseDisposalDescription> getInUseDispDescr() {
        if (inUseDispDescr == null) {
            inUseDispDescr = new Array<HardwarePartWasteProductsInUseDisposalDescription>();
        }
        return this.inUseDispDescr;
    }

    public Array<HardwarePartWasteProductsPlannedDisposalDescription> getPlndDispDescr() {
        if (plndDispDescr == null) {
            plndDispDescr = new Array<HardwarePartWasteProductsPlannedDisposalDescription>();
        }
        return this.plndDispDescr;
    }

    public Array<HardwarePartEnvironmentalAspectInUseClass> getEnvmtInUseClass() {
        if (envmtInUseClass == null) {
            envmtInUseClass = new Array<HardwarePartEnvironmentalAspectInUseClass>();
        }
        return this.envmtInUseClass;
    }

    public Array<HardwarePartEnvironmentalAspectPlannedDisposalClass> getEnvmtDispClass() {
        if (envmtDispClass == null) {
            envmtDispClass = new Array<HardwarePartEnvironmentalAspectPlannedDisposalClass>();
        }
        return this.envmtDispClass;
    }

    public Array<HardwarePartConsumptionRate> getConsRte() {
        if (consRte == null) {
            consRte = new Array<HardwarePartConsumptionRate>();
        }
        return this.consRte;
    }

    public PartDemilitarizationClass getDec() {
        return dec;
    }

    public void setDec(PartDemilitarizationClass value) {
        this.dec = value;
    }

    public PartSpecialHandlingRequirement getPhstReq() {
        return phstReq;
    }

    public void setPhstReq(PartSpecialHandlingRequirement value) {
        this.phstReq = value;
    }

    public Array<PartMaturityClass> getMaturity() {
        if (maturity == null) {
            maturity = new Array<PartMaturityClass>();
        }
        return this.maturity;
    }

    public Array<PartObsolescenceRiskAssessment> getObsRisk() {
        if (obsRisk == null) {
            obsRisk = new Array<PartObsolescenceRiskAssessment>();
        }
        return this.obsRisk;
    }

    public Array<PartAsDesignedPartsList> getPartsList() {
        if (partsList == null) {
            partsList = new Array<PartAsDesignedPartsList>();
        }
        return this.partsList;
    }

    public Array<AlternatePartAsDesignedRelationship> getAltPart() {
        if (altPart == null) {
            altPart = new Array<AlternatePartAsDesignedRelationship>();
        }
        return this.altPart;
    }

    public Array<ContainedSubstance> getContSubs() {
        if (contSubs == null) {
            contSubs = new Array<ContainedSubstance>();
        }
        return this.contSubs;
    }

    public s3000l.OperationalTask.Secs getSecs() {
        return secs;
    }

    public void setSecs(s3000l.OperationalTask.Secs value) {
        this.secs = value;
    }

    public LsaCandidateIndicator getLsaCand() {
        return lsaCand;
    }

    public void setLsaCand(LsaCandidateIndicator value) {
        this.lsaCand = value;
    }

    public LsaCandidateRationale getCandRtnl() {
        return candRtnl;
    }

    public void setCandRtnl(LsaCandidateRationale value) {
        this.candRtnl = value;
    }

    public Array<LsaCandidateMaintenanceConcept> getMaintCpt() {
        if (maintCpt == null) {
            maintCpt = new Array<LsaCandidateMaintenanceConcept>();
        }
        return this.maintCpt;
    }

    public Array<LsaCandidateMaintenanceSolution> getMaintSln() {
        if (maintSln == null) {
            maintSln = new Array<LsaCandidateMaintenanceSolution>();
        }
        return this.maintSln;
    }

    public Array<s3000l.ZoneElementRevision.SrvLife> getProductServiceLife() {
        if (productServiceLife == null) {
            productServiceLife = new Array<s3000l.ZoneElementRevision.SrvLife>();
        }
        return this.productServiceLife;
    }

    public Array<s3000l.ZoneElementRevision.SmInt> getScheduledMaintenanceInterval() {
        if (scheduledMaintenanceInterval == null) {
            scheduledMaintenanceInterval = new Array<s3000l.ZoneElementRevision.SmInt>();
        }
        return this.scheduledMaintenanceInterval;
    }

    public Array<s3000l.ZoneElementRevision.Mfop> getMaintenanceFreeOperatingPeriod() {
        if (maintenanceFreeOperatingPeriod == null) {
            maintenanceFreeOperatingPeriod = new Array<s3000l.ZoneElementRevision.Mfop>();
        }
        return this.maintenanceFreeOperatingPeriod;
    }

    public Array<s3000l.ZoneElementRevision.Dt> getDownTime() {
        if (downTime == null) {
            downTime = new Array<s3000l.ZoneElementRevision.Dt>();
        }
        return this.downTime;
    }

    public Array<s3000l.ZoneElementRevision.Mmhoh> getMaintenanceManHoursPerOperatingHour() {
        if (maintenanceManHoursPerOperatingHour == null) {
            maintenanceManHoursPerOperatingHour = new Array<s3000l.ZoneElementRevision.Mmhoh>();
        }
        return this.maintenanceManHoursPerOperatingHour;
    }

    public Array<s3000l.ZoneElementRevision.Mtbur> getMeanTimeBetweenUnscheduledRemoval() {
        if (meanTimeBetweenUnscheduledRemoval == null) {
            meanTimeBetweenUnscheduledRemoval = new Array<s3000l.ZoneElementRevision.Mtbur>();
        }
        return this.meanTimeBetweenUnscheduledRemoval;
    }

    public Array<s3000l.ZoneElementRevision.Mttr> getMeanTimeToRepair() {
        if (meanTimeToRepair == null) {
            meanTimeToRepair = new Array<s3000l.ZoneElementRevision.Mttr>();
        }
        return this.meanTimeToRepair;
    }

    public Array<s3000l.ZoneElementRevision.Dmc> getDirectMaintenanceCost() {
        if (directMaintenanceCost == null) {
            directMaintenanceCost = new Array<s3000l.ZoneElementRevision.Dmc>();
        }
        return this.directMaintenanceCost;
    }

    public Array<s3000l.ZoneElementRevision.Spt> getShopProcessingTime() {
        if (shopProcessingTime == null) {
            shopProcessingTime = new Array<s3000l.ZoneElementRevision.Spt>();
        }
        return this.shopProcessingTime;
    }

    public Array<s3000l.ZoneElementRevision.Foh> getFailuresPerOperatingHour() {
        if (failuresPerOperatingHour == null) {
            failuresPerOperatingHour = new Array<s3000l.ZoneElementRevision.Foh>();
        }
        return this.failuresPerOperatingHour;
    }

    public Array<s3000l.ZoneElementRevision.Rplt> getReplacementTime() {
        if (replacementTime == null) {
            replacementTime = new Array<s3000l.ZoneElementRevision.Rplt>();
        }
        return this.replacementTime;
    }

    public Array<s3000l.ZoneElementRevision.Lcc> getLifeCycleCost() {
        if (lifeCycleCost == null) {
            lifeCycleCost = new Array<s3000l.ZoneElementRevision.Lcc>();
        }
        return this.lifeCycleCost;
    }

    public Array<s3000l.ZoneElementRevision.Mtbf> getMeanTimeBetweenFailure() {
        if (meanTimeBetweenFailure == null) {
            meanTimeBetweenFailure = new Array<s3000l.ZoneElementRevision.Mtbf>();
        }
        return this.meanTimeBetweenFailure;
    }

    public Array<s3000l.ZoneElementRevision.FRate> getFailureRate() {
        if (failureRate == null) {
            failureRate = new Array<s3000l.ZoneElementRevision.FRate>();
        }
        return this.failureRate;
    }

    public LsaCandidateAnalysisActivities getAnlysActvty() {
        return anlysActvty;
    }

    public void setAnlysActvty(LsaCandidateAnalysisActivities value) {
        this.anlysActvty = value;
    }

    public Array<TaskRequirementTarget> getTaskReq() {
        if (taskReq == null) {
            taskReq = new Array<TaskRequirementTarget>();
        }
        return this.taskReq;
    }

    public Array<Object> getTaskTargetNonAbstractClasses() {
        if (taskTargetNonAbstractClasses == null) {
            taskTargetNonAbstractClasses = new Array<Object>();
        }
        return this.taskTargetNonAbstractClasses;
    }

    public s3000l.DownTime.OrgInfos getOrgInfos() {
        return orgInfos;
    }

    public void setOrgInfos(s3000l.DownTime.OrgInfos value) {
        this.orgInfos = value;
    }

    public s3000l.ConditionInstance.Docs getDocs() {
        return docs;
    }

    public void setDocs(s3000l.ConditionInstance.Docs value) {
        this.docs = value;
    }

    public s3000l.ConditionInstance.Rmks getRmks() {
        return rmks;
    }

    public void setRmks(s3000l.ConditionInstance.Rmks value) {
        this.rmks = value;
    }

    public s3000l.ZoneElementRevision.DmgAnlys getDmgAnlys() {
        return dmgAnlys;
    }

    public void setDmgAnlys(s3000l.ZoneElementRevision.DmgAnlys value) {
        this.dmgAnlys = value;
    }

    public s3000l.ZoneElementRevision.FailModes getFailModes() {
        return failModes;
    }

    public void setFailModes(s3000l.ZoneElementRevision.FailModes value) {
        this.failModes = value;
    }

    public s3000l.ZoneElementRevision.DetectMnCaps getDetectMnCaps() {
        return detectMnCaps;
    }

    public void setDetectMnCaps(s3000l.ZoneElementRevision.DetectMnCaps value) {
        this.detectMnCaps = value;
    }

    public AuthorityToOperate getAuthToOp() {
        return authToOp;
    }

    public void setAuthToOp(AuthorityToOperate value) {
        this.authToOp = value;
    }

    public Array<NestedAllowedProductConfigurationRelationship> getNestedPC() {
        if (nestedPC == null) {
            nestedPC = new Array<NestedAllowedProductConfigurationRelationship>();
        }
        return this.nestedPC;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String value) {
        this.uid = value;
    }

    public CrudCodeValues getCrud() {
        if (crud == null) {
            return CrudCodeValues.I;
        } else {
            return crud;
        }
    }

    public void setCrud(CrudCodeValues value) {
        this.crud = value;
    }

	public AllowedProductConfigurationHardwarePartAsDesigned() {
		super("http://www.asd-europe.org/s-series/s3000l", "AllowedProductConfigurationHardwarePartAsDesigned");
	}

}
